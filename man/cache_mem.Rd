% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache-memory.R
\name{cache_mem}
\alias{cache_mem}
\title{Create a memory cache object}
\usage{
cache_mem(
  max_size = 512 * 1024^2,
  max_age = Inf,
  max_n = Inf,
  evict = c("lru", "fifo"),
  missing = key_missing(),
  logfile = NULL
)
}
\arguments{
\item{max_size}{Maximum size of the cache, in bytes. If the cache exceeds
this size, cached objects will be removed according to the value of the
\code{evict}. Use \code{Inf} for no size limit. The default is 1 gigabyte.}

\item{max_age}{Maximum age of files in cache before they are evicted, in
seconds. Use \code{Inf} for no age limit.}

\item{max_n}{Maximum number of objects in the cache. If the number of objects
exceeds this value, then cached objects will be removed according to the
value of \code{evict}. Use \code{Inf} for no limit of number of items.}

\item{evict}{The eviction policy to use to decide which objects are removed
when a cache pruning occurs. Currently, \code{"lru"} and \code{"fifo"} are supported.}

\item{missing}{A value to return when \code{get(key)} is called but the key is not
present in the cache. The default is a \code{\link[=key_missing]{key_missing()}} object. It is
actually an expression that is evaluated each time there is a cache miss.
See section Missing keys for more information.}

\item{logfile}{An optional filename or connection object to where logging
information will be written. To log to the console, use \code{stderr()} or
\code{stdout()}.}
}
\value{
A memory caching object, with class \code{cache_mem}.
}
\description{
A memory cache object is a key-value store that saves the values in an
environment. Objects can be stored and retrieved using the \code{get()} and
\code{set()} methods. Objects are automatically pruned from the cache according to
the parameters \code{max_size}, \code{max_age}, \code{max_n}, and \code{evict}.
}
\details{
In a \code{cache_mem}, R objects are stored directly in the cache; they are not
\emph{not} serialized before being stored in the cache. This contrasts with other
cache types, like \code{\link[=cache_disk]{cache_disk()}}, where objects are serialized, and the
serialized object is cached. This can result in some differences of behavior.
For example, as long as an object is stored in a cache_mem, it will not be
garbage collected.
}
\section{Missing keys}{


The \code{missing} parameter controls what happens when \code{get()} is called with a
key that is not in the cache (a cache miss). The default behavior is to
return a \code{\link[=key_missing]{key_missing()}} object. This is a \emph{sentinel value} that indicates
that the key was not present in the cache. You can test if the returned
value represents a missing key by using the \code{\link[=is.key_missing]{is.key_missing()}} function.
You can also have \code{get()} return a different sentinel value, like \code{NULL}.
If you want to throw an error on a cache miss, you can do so by providing
an expression for \code{missing}, as in \code{missing = stop("Missing key")}.

When the cache is created, you can supply a value for \code{missing}, which sets
the default value to be returned for missing values. It can also be
overridden when \code{get()} is called, by supplying a \code{missing} argument. For
example, if you use \code{cache$get("mykey", missing = NULL)}, it will return
\code{NULL} if the key is not in the cache.

The \code{missing} parameter is actually an expression which is evaluated each
time there is a cache miss. A quosure (from the rlang package) can be used.

If you use this, the code that calls \code{get()} should be wrapped with
\code{\link[=tryCatch]{tryCatch()}} to gracefully handle missing keys.

@section Cache pruning:

Cache pruning occurs when \code{set()} is called, or it can be invoked manually
by calling \code{prune()}.

When a pruning occurs, if there are any objects that are older than
\code{max_age}, they will be removed.

The \code{max_size} and \code{max_n} parameters are applied to the cache as a whole,
in contrast to \code{max_age}, which is applied to each object individually.

If the number of objects in the cache exceeds \code{max_n}, then objects will be
removed from the cache according to the eviction policy, which is set with
the \code{evict} parameter. Objects will be removed so that the number of items
is \code{max_n}.

If the size of the objects in the cache exceeds \code{max_size}, then objects
will be removed from the cache. Objects will be removed from the cache so
that the total size remains under \code{max_size}. Note that the size is
calculated using the size of the files, not the size of disk space used by
the files --- these two values can differ because of files are stored in
blocks on disk. For example, if the block size is 4096 bytes, then a file
that is one byte in size will take 4096 bytes on disk.

Another time that objects can be removed from the cache is when \code{get()} is
called. If the target object is older than \code{max_age}, it will be removed
and the cache will report it as a missing value.
}

\section{Eviction policies}{


If \code{max_n} or \code{max_size} are used, then objects will be removed
from the cache according to an eviction policy. The available eviction
policies are:

\describe{
\item{\code{"lru"}}{
Least Recently Used. The least recently used objects will be removed.
This uses the filesystem's atime property. Some filesystems do not
support atime, or have a very low atime resolution. The cache_mem will
check for atime support, and if the filesystem does not support atime,
a warning will be issued and the "fifo" policy will be used instead.
}
\item{\code{"fifo"}}{
First-in-first-out. The oldest objects will be removed.
}
}
}

\section{Methods}{


A disk cache object has the following methods:

\describe{
\item{\code{get(key, missing)}}{
Returns the value associated with \code{key}. If the key is not in the
cache, then it evaluates the expression specified by \code{missing} and
returns the value. If \code{missing} is specified here, then it will
override the default that was set when the \code{cache_mem} object was
created. See section Missing Keys for more information.
}
\item{\code{set(key, value)}}{
Stores the \code{key}-\code{value} pair in the cache.
}
\item{\code{exists(key)}}{
Returns \code{TRUE} if the cache contains the key, otherwise
\code{FALSE}.
}
\item{\code{size()}}{
Returns the number of items currently in the cache.
}
\item{\code{keys()}}{
Returns a character vector of all keys currently in the cache.
}
\item{\code{reset()}}{
Clears all objects from the cache.
}
\item{\code{destroy()}}{
Clears all objects in the cache, and removes the cache directory from
disk.
}
\item{\code{prune()}}{
Prunes the cache, using the parameters specified by \code{max_size},
\code{max_age}, \code{max_n}, and \code{evict}.
}
}
}

